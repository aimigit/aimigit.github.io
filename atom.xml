<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>埃米</title>
  <subtitle>纳米的十分之一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aimigit.github.io/"/>
  <updated>2017-09-18T04:30:25.783Z</updated>
  <id>http://aimigit.github.io/</id>
  
  <author>
    <name>aimigit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>引入代码高亮显示</title>
    <link href="http://aimigit.github.io/2017/09/18/hightlight_code/"/>
    <id>http://aimigit.github.io/2017/09/18/hightlight_code/</id>
    <published>2017-09-18T03:33:26.000Z</published>
    <updated>2017-09-18T04:30:25.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码高亮显示"><a href="#代码高亮显示" class="headerlink" title="代码高亮显示"></a>代码高亮显示</h2><p>代码高亮显示效果，使用的是hightlight.js  <a href="https://highlightjs.org/" target="_blank" rel="external">https://highlightjs.org/</a><br>使用方法很简单</p>
<ul>
<li>在页面引入对应代码，我使用的cdn库</li>
</ul>
<p>css,有多个样式可选，在官网自行查看<br>&lt;link rel=”stylesheet” href=”//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css”&gt;<br>&lt;script src=”//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js”&gt; &lt;/script&gt;<br>&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</p>
<ul>
<li>显示的代码用以下标记括起来，支持多语法java，php，c++等等</li>
</ul>
<p>&lt;pre&gt;&lt;code class=”html”&gt;。。。代码。。。&lt;/code&gt;&lt;/pre&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码高亮显示&quot;&gt;&lt;a href=&quot;#代码高亮显示&quot; class=&quot;headerlink&quot; title=&quot;代码高亮显示&quot;&gt;&lt;/a&gt;代码高亮显示&lt;/h2&gt;&lt;p&gt;代码高亮显示效果，使用的是hightlight.js  &lt;a href=&quot;https://highlight
    
    </summary>
    
    
      <category term="技术" scheme="http://aimigit.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="hightlight" scheme="http://aimigit.github.io/tags/hightlight/"/>
    
  </entry>
  
  <entry>
    <title>nginx_负载均衡配置</title>
    <link href="http://aimigit.github.io/2017/09/16/nginx-balance/"/>
    <id>http://aimigit.github.io/2017/09/16/nginx-balance/</id>
    <published>2017-09-16T08:03:28.000Z</published>
    <updated>2017-09-18T02:59:39.184Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 目前用的比较多了，官网 <a href="https://nginx.org/" target="_blank" rel="external">https://nginx.org/</a></p>
<h2 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h2><ul>
<li>nginx   启动</li>
<li>nginx   -c /etc/nginx/nginx.conf  指定配置文件启动</li>
<li>nginx -s stop  关闭</li>
<li>nginx -t  检测配置文件</li>
<li>nginx -s reload 重载配置文件</li>
</ul>
<h2 id="配置文件nginx-conf例子参考"><a href="#配置文件nginx-conf例子参考" class="headerlink" title="配置文件nginx.conf例子参考"></a>配置文件nginx.conf例子参考</h2><pre><code class="nginx">
    user  webuser;

    #worker进程数，通常设置等同于CPU数量，auto为自动检测
    worker_processes  auto;
    #worker进程打开最大文件数，可CPU*10000设置
    worker_rlimit_nofile 100000;

    #error_log  logs/error.log;
    error_log  logs/error.log  notice;
    #error_log  logs/error.log  info;

    pid        logs/nginx.pid;

<a id="more"></a>    

    events {
        worker_connections  1024;
       #告诉nginx收到一个新链接通知后接受尽可能多的链接
        multi_accept on;
       #设置用于复用客户端线程的轮训方法
       use epoll;
    }


    http {
        include       mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        #设置nginx是否存储访问日志，关闭这个可以让读取磁盘IO操作更快
        #access_log  logs/access.log  main;
        #优化磁盘IO设置，指定nginx是否调用sendfile函数来输出文件，普通应用设为on，下载等磁盘IO高的应用，可设为off
        sendfile        off;
        #tcp_nopush     on;

        #keepalive_timeout  0;
        keepalive_timeout  30;
        #设置用户保存各种key的共享内存的参数，5m指的是5兆
        limit_conn_zone $binary_remote_addr zone=addr:5m;
        #为给定的key设置最大的连接数，这里的key是addr，设定的值是100，就是说允许每一个IP地址最多同时打开100个连接
        limit_conn addr 100;

        #gzip  on;
        #gzip_disable "MSIE [1-6]."; 
        #开发缓存的同时也指定了缓存文件的最大数量，20s如果文件没有请求则删除缓存
        open_file_cache max=100000 inactive=20s;
        #指多长时间检查一次缓存的有效信息
        open_file_cache_valid 60s;
        #文件缓存最小的访问次数，只有访问超过5次的才会被缓存
        open_file_cache_min_uses 5;
        #当搜索一个文件时是否缓存错误信息
        open_file_cache_errors on;

        #允许客户端请求的最大单文件字节数
        client_max_body_size 20m;
        #冲区代理缓冲用户端请求的最大字节数
        client_header_buffer_size 32k;

        upstream local_host{  
            #指定轮询权重，weight和访问比率成正比，用于后端服务器性能不均的情况。
            server 127.0.0.1:8181 weight=1;  
            server 127.0.0.1:8182 weight=1;   
            #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
            #ip_hash;  

        }  

        server {
            listen       80;
            server_name  www.web.cn;

            charset UTF-8;

            #access_log  logs/host.access.log  main;
            #网站1
            location /myweb1/{
                #真实ip穿透
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass http://www.web.cn:9001;
            }
            #网站2
            location /myweb2/{
               proxy_set_header Host $host;
               proxy_set_header X-Real-IP $remote_addr;
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
               proxy_pass http://www.web.cn:9002;
            }
            #接口
            location /web/api{
               proxy_set_header Host $host;
               proxy_set_header X-Real-IP $remote_addr;
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
               #负载均衡
               proxy_pass http://local_host;
               #关闭日志
               access_log off;
            }
            #静态图片
            location /bqms/static/api/ {
                 root /home/webapps/image/;
                 index  index.html index.htm;
                 expires 90d;
                 access_log off;
            }
            location  / {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                root   html;
                index  index.html index.htm;

            }
            #error_page  404              /404.html;

            # redirect server error pages to the static page /50x.html
            #
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }

            # deny access to .htaccess files, if Apache's document root
            # concurs with nginx's one
            #
            #location ~ /\.ht {
            #    deny  all;
            #}
        }


        # another virtual host using mix of IP-, name-, and port-based configuration
        #
        #server {
        #    listen       8000;
        #    listen       somename:8080;
        #    server_name  somename  alias  another.alias;

        #    location / {
        #        root   html;
        #        index  index.html index.htm;
        #    }
        #}


        # HTTPS server
        #
        #server {
        #    listen       443 ssl;
        #    server_name  localhost;

        #    ssl_certificate      cert.pem;
        #    ssl_certificate_key  cert.key;

        #    ssl_session_cache    shared:SSL:1m;
        #    ssl_session_timeout  5m;

        #    ssl_ciphers  HIGH:!aNULL:!MD5;
        #    ssl_prefer_server_ciphers  on;

        #    location / {
        #        root   html;
        #        index  index.html index.htm;
        #    }
        #}

    }

</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx 目前用的比较多了，官网 &lt;a href=&quot;https://nginx.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nginx.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;nginx-常用命令&quot;&gt;&lt;a href=&quot;#nginx-常用命令&quot; class=&quot;headerlink&quot; title=&quot;nginx 常用命令&quot;&gt;&lt;/a&gt;nginx 常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nginx   启动&lt;/li&gt;
&lt;li&gt;nginx   -c /etc/nginx/nginx.conf  指定配置文件启动&lt;/li&gt;
&lt;li&gt;nginx -s stop  关闭&lt;/li&gt;
&lt;li&gt;nginx -t  检测配置文件&lt;/li&gt;
&lt;li&gt;nginx -s reload 重载配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置文件nginx-conf例子参考&quot;&gt;&lt;a href=&quot;#配置文件nginx-conf例子参考&quot; class=&quot;headerlink&quot; title=&quot;配置文件nginx.conf例子参考&quot;&gt;&lt;/a&gt;配置文件nginx.conf例子参考&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;nginx&quot;&gt;
    user  webuser;

    #worker进程数，通常设置等同于CPU数量，auto为自动检测
    worker_processes  auto;
    #worker进程打开最大文件数，可CPU*10000设置
    worker_rlimit_nofile 100000;

    #error_log  logs/error.log;
    error_log  logs/error.log  notice;
    #error_log  logs/error.log  info;

    pid        logs/nginx.pid;
    
    </summary>
    
    
      <category term="技术" scheme="http://aimigit.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nginx" scheme="http://aimigit.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://aimigit.github.io/2017/09/01/markdown_code/"/>
    <id>http://aimigit.github.io/2017/09/01/markdown_code/</id>
    <published>2017-09-01T05:40:18.000Z</published>
    <updated>2017-09-01T06:44:44.163Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 支持markdown，为了让博客写的更优美，建议学习一下。</p>
<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><p><img src="/assets/blog_img/markdown.jpg" alt="markdown"></p>
<ol>
<li><p>标题设置（让字体变大，和word的标题意思一样）<br>在Markdown当中设置标题，有两种方式：<br>第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。<br>第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p>
</li>
<li><p>块注释（blockquote）<br>通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。）</p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>斜体<br>将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p>
</li>
<li><p>粗体<br>将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p>
</li>
<li><p>无序列表<br>在文字开头添加(<em>, +, and -)实现无序列表。但是要注意在(</em>, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p>
</li>
<li><p>有序列表<br>使用数字后面跟上句号。（还要有空格）</p>
</li>
<li><p>链接（Links）<br>Markdown中有两种方式，实现链接，分别为内联方式和引用方式。<br>内联方式：This is an <a href="http://example.com/" target="_blank" rel="external">example link</a>.<br>引用方式：<br>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="external">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="external">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="external">MSN</a>.  </p>
</li>
</ol>
<ol>
<li>图片（Images）<br>图片的处理方式和链接的处理方式，非常的类似。<br>内联方式：<img src="/path/to/img.jpg" alt="alt text" title="Title"><br>引用方式：<br><img src="/path/to/img.jpg" alt="alt text" title="Title"> </li>
</ol>
<ol>
<li><p>代码（HTML中所谓的Code）<br>实现方式有两种：<br>第一种：简单文字出现一个代码框。使用<code>&lt;blockquote&gt;</code>。（<code>不是单引号而是左上角的ESC下面~中的</code>）<br>第二种：大片文字需要实现代码框。使用Tab和四个空格。</p>
</li>
<li><p>脚注（footnote）<br>实现方式如下：<br>hello<a href="hi">^hello</a></p>
</li>
</ol>
<ol>
<li>下划线<br>在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</li>
</ol>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>支持的软件非常多，找个自己喜欢的就行。</p>
<ul>
<li>在线工具<a href="https://stackedit.io/editor" target="_blank" rel="external">https://stackedit.io/editor</a></li>
<li>Typora</li>
<li>谷歌浏览器插件 Minimalist Markdown Editor</li>
<li>Sublime Text</li>
<li>Atom</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 支持markdown，为了让博客写的更优美，建议学习一下。&lt;/p&gt;
&lt;h1 id=&quot;markdown语法&quot;&gt;&lt;a href=&quot;#markdown语法&quot; class=&quot;headerlink&quot; title=&quot;markdown语法&quot;&gt;&lt;/a&gt;markdown语法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog_img/markdown.jpg&quot; alt=&quot;markdown&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;标题设置（让字体变大，和word的标题意思一样）&lt;br&gt;在Markdown当中设置标题，有两种方式：&lt;br&gt;第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。&lt;br&gt;第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;块注释（blockquote）&lt;br&gt;通过在文字开头添加“&amp;gt;”表示块注释。（当&amp;gt;和文字之间添加五个blank时，块注释的文字会有变化。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://aimigit.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="markdown" scheme="http://aimigit.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo搭建博客</title>
    <link href="http://aimigit.github.io/2017/08/31/github_hexo_start/"/>
    <id>http://aimigit.github.io/2017/08/31/github_hexo_start/</id>
    <published>2017-08-31T08:11:09.000Z</published>
    <updated>2017-09-18T03:18:56.067Z</updated>
    
    <content type="html"><![CDATA[<p>github搭建博客，网上的教程很多了。这边搭建过程，简单记录一下。<br>hexo是博客，需要node.js，部署在github，所以需要下面这些</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>github帐号一个</li>
<li>github软件</li>
<li>node.js软件</li>
<li>hexo软件</li>
</ol>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul>
<li>github帐号，<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 官网注册</li>
<li>下载安装客户端<a href="https://desktop.github.com/" target="_blank" rel="external">https://desktop.github.com/</a></li>
<li>下载安装<a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a>  建议直接安装在c盘，使用命令行方便<br>这样环境就搭建好了，hexo后面用命令安装。</li>
</ul>
<a id="more"></a>
<h1 id="安装hexo配置"><a href="#安装hexo配置" class="headerlink" title="安装hexo配置"></a>安装hexo配置</h1><p>在d盘创建文件夹blog<br>打开Git bash命令行窗口，输入安装命令</p>
<p><pre><code class="bash">npm install -g hexo-cli<br>npm install hexo-deployer-git –save</code></pre></p>
<p>cd d:/blog<br>换国内镜像点<br>npm config set registry “<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a>“<br>安装<br>hexo init<br>npm install<br>hexo generate<br>hexo server<br>正常启动后在浏览器查看<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>github帐号创建一个同名的项目 “youname.github.io”。<br>然后获取到项目ssh地址 git@github.com:youname/youname.github.io.git<br>修改d:/blog/_config.yml 文件</p>
<p><pre><code class="bash">deploy:<br>  type: git<br>  repository: git@github.com:youname/youname.github.io.git<br>  branch: master<br>  </code></pre></p>
<h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><p>在 Git Bash 下执行如下命令</p>
<p><pre><code class="bash">git config –global user.name “YOUR NAME”<br>git config –global user.email “YOUR EMAIL ADDRESS”<br>ssh-keygen -t rsa -b 4096 -C “github帐号邮箱”  一路回车<br>eval “$(ssh-agent -s)”<br>ssh-add ~/.ssh/id_rsa<br>clip &lt; ~/.ssh/id_rsa.pub<br></code></pre><br>登录 Github 帐号，依次点击自己的头像，Settings&gt;SSH and GPG keys&gt;Add SSH key ,把key粘贴进去保存<br>返回Git Bash，输入<br><code>ssh -T git@github.com<br></code><br>如果连接成功，显示Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.<br>输入<br><code>hexo deploy<br></code><br>部署成功后，在浏览器输入，youname.github.io<br>到此，搭建博客成功。<br>后续，你可以更改博客主题，绑定独立域名等等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github搭建博客，网上的教程很多了。这边搭建过程，简单记录一下。&lt;br&gt;hexo是博客，需要node.js，部署在github，所以需要下面这些&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;github帐号一个&lt;/li&gt;
&lt;li&gt;github软件&lt;/li&gt;
&lt;li&gt;node.js软件&lt;/li&gt;
&lt;li&gt;hexo软件&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;github帐号，&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/&lt;/a&gt; 官网注册&lt;/li&gt;
&lt;li&gt;下载安装客户端&lt;a href=&quot;https://desktop.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://desktop.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载安装&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org&lt;/a&gt;  建议直接安装在c盘，使用命令行方便&lt;br&gt;这样环境就搭建好了，hexo后面用命令安装。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://aimigit.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="hexo" scheme="http://aimigit.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
